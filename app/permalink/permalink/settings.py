"""
Django settings for permalink project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = 'link.User'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

SITE_PROTOCOL = os.environ.get(
    "SITE_PROTOCOL"
)  # http or https  # production SECURITY WARNING: use HTTPS
SITE_DOMAIN = os.environ.get("SITE_DOMAIN")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG") == "True"

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "*").split(",")


CSRF = os.environ.get("CSRF_TRUSTED_ORIGINS")

if CSRF :
    CSRF_TRUSTED_ORIGINS = CSRF.split(",")

SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # keep session cookie after browser close
SESSION_COOKIE_AGE = 86400

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # extensions
    "django_extensions",
    "rest_framework",
    "mozilla_django_oidc",
    "link",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "permalink.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "link.context_processors.host",
            ],
        },
    },
]

WSGI_APPLICATION = "permalink.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DB_NAME = os.environ.get("POSTGRES_DB")
DB_USERNAME = os.environ.get("POSTGRES_USER")
DB_PASSWORD = os.environ.get("POSTGRES_PASSWORD")
DB_HOST = os.environ.get("DATABASE_HOST")
DB_PORT = os.environ.get("DATABASE_PORT")


DATABASE_TYPE = os.environ.get("DATABASE_TYPE")

if DATABASE_TYPE == "sqlite":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
elif DATABASE_TYPE == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": DB_NAME,
            "USER": DB_USERNAME,
            "PASSWORD": DB_PASSWORD,
            "HOST": DB_HOST,
            "PORT": DB_PORT,
        }
    }
else:
    raise NotImplementedError("No database configuration for " + DATABASE_TYPE)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
STATIC_ROOT = os.environ.get("STATIC_ROOT")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Nextcloud
NEXTCLOUD_URL = os.environ.get("NEXTCLOUD_URL")

# Oauth2.0
AUTHLIB_OAUTH_CLIENTS = {
    "client_id": os.environ.get("NEXTCLOUD_CLIENT_ID"),
    "client_secret": os.environ.get("NEXTCLOUD_SECRET_ID"),
    "authorize_url": f"{NEXTCLOUD_URL}/index.php/apps/oauth2/authorize",
    "access_token_url": f"{NEXTCLOUD_URL}/index.php/apps/oauth2/api/v1/token",
    "refresh_token_url": f"{NEXTCLOUD_URL}/index.php/apps/oauth2/api/v1/token",
    "api_base_url": NEXTCLOUD_URL,
    "client_kwargs": {
        "scope": "openid profile email"  # adjust based on what Nextcloud provides
    },
}

AUTHENTICATION_BACKENDS = [
    "mozilla_django_oidc.auth.OIDCAuthenticationBackend",
    "django.contrib.auth.backends.ModelBackend",
]

OIDC_RP_CLIENT_ID = "Permalink_clientid_dev"
OIDC_RP_CLIENT_SECRET = "Permalink_secret_dev"
OIDC_OP_DISCOVERY_ENDPOINT = "https://auth-dev.ulb.be/.well-known/openid-configuration"
OIDC_OP_AUTHORIZATION_ENDPOINT="https://auth-dev.ulb.be/auth"
OIDC_OP_TOKEN_ENDPOINT = "https://auth-dev.ulb.be/auth/token"
OIDC_OP_USER_ENDPOINT = "https://auth-dev.ulb.be/auth/user"

# = "<URL of the OIDC OP userinfo endpoint>"


import sys

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simplified": {
            "format": "{levelname} : {name} - {module} : {message}",
            "style": "{",
        },
        "normal": {
            "format": "{levelname} : {asctime} : {name} - {module} : {message}",
            "datefmt": "%Y-%m-%d %H:%M:%S",
            "style": "{",
        },
    },
    "handlers": {
        "console_info": {
            "class": "logging.StreamHandler",
            "formatter": "simplified",
            "stream": sys.stdout,
            "level": "INFO",
        },
        "console_error": {
            "class": "logging.StreamHandler",
            "formatter": "simplified",
            "stream": sys.stderr,
            "level": "ERROR",
        },
        "django_error_handler": {
            "class": "logging.FileHandler",
            "level": "ERROR",
            "filename" : "/var/log/permalink.log",
            "formatter": "normal",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["django_error_handler", "console_info", "console_error"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

